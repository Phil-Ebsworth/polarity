[
    {
        "name": "Lawful Functor Class",
        "path": "examples/functor.pol",
        "target": "functor.html"
    },
    {
        "name": "Martin-Löf Equality Type",
        "path": "examples/eq.pol",
        "target": "eq.html"
    },
    {
        "name": "STLC Type Soundness",
        "path": "examples/stlc.pol",
        "target": "stlc.html"
    },
    {
        "name": "Strong Existentials Demystified",
        "path": "examples/strong_existentials.pol",
        "target": "strong_existentials.html"
    },
    {
        "name": "Tutorial",
        "path": "examples/tutorial.pol",
        "target": "tutorial.html"
    },
    {
        "name": "Π Is Not Built-In",
        "path": "examples/pi.pol",
        "target": "pi.html"
    },
    {
        "name": "λ-Encoding: Church",
        "path": "examples/encoding_church.pol",
        "target": "encoding_church.html"
    },
    {
        "name": "λ-Encoding: Fu & Stump",
        "path": "examples/encoding_fu_stump.pol",
        "target": "encoding_fu_stump.html"
    },
    {
        "name": "λ-Encoding: Parigot",
        "path": "examples/encoding_parigot.pol",
        "target": "encoding_parigot.html"
    },
    {
        "name": "λ-Encoding: Scott",
        "path": "examples/encoding_scott.pol",
        "target": "encoding_scott.html"
    },
    {
        "name": "Fun",
        "path": "std/codata/fun.pol",
        "target": "fun.html"
    },
    {
        "name": "Pair",
        "path": "std/codata/pair.pol",
        "target": "pair.html"
    },
    {
        "name": "Pi",
        "path": "std/codata/pi.pol",
        "target": "pi.html"
    },
    {
        "name": "Sigma",
        "path": "std/codata/sigma.pol",
        "target": "sigma.html"
    },
    {
        "name": "Stream",
        "path": "std/codata/stream.pol",
        "target": "stream.html"
    },
    {
        "name": "Unit",
        "path": "std/codata/unit.pol",
        "target": "unit.html"
    },
    {
        "name": "Bool",
        "path": "std/data/bool.pol",
        "target": "bool.html"
    },
    {
        "name": "Eq",
        "path": "std/data/eq.pol",
        "target": "eq.html"
    },
    {
        "name": "List",
        "path": "std/data/list.pol",
        "target": "list.html"
    },
    {
        "name": "Nat",
        "path": "std/data/nat.pol",
        "target": "nat.html"
    },
    {
        "name": "Option",
        "path": "std/data/option.pol",
        "target": "option.html"
    },
    {
        "name": "Ordering",
        "path": "std/data/ordering.pol",
        "target": "ordering.html"
    },
    {
        "name": "Pair",
        "path": "std/data/pair.pol",
        "target": "pair.html"
    },
    {
        "name": "Result",
        "path": "std/data/result.pol",
        "target": "result.html"
    },
    {
        "name": "Sigma",
        "path": "std/data/sigma.pol",
        "target": "sigma.html"
    },
    {
        "name": "Unit",
        "path": "std/data/unit.pol",
        "target": "unit.html"
    },
    {
        "name": "Vec",
        "path": "std/data/vec.pol",
        "target": "vec.html"
    },
    {
        "name": "Void",
        "path": "std/data/void.pol",
        "target": "void.html"
    }
]
